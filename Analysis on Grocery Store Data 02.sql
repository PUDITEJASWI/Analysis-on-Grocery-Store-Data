CREATE DATABASE grocery_store;
USE grocery_store;

-- 1. Supplier Table
CREATE TABLE IF NOT EXISTS supplier (
    sup_id TINYINT AUTO_INCREMENT PRIMARY KEY,
    sup_name VARCHAR(100) NOT NULL,
    address TEXT
);

-- 2. Categories Table
CREATE TABLE IF NOT EXISTS categories (
    cat_id TINYINT AUTO_INCREMENT PRIMARY KEY,
    cat_name VARCHAR(100) NOT NULL
);

-- 3. Employees Table
CREATE TABLE IF NOT EXISTS employees (
    emp_id TINYINT AUTO_INCREMENT PRIMARY KEY,
    emp_name VARCHAR(100) NOT NULL,
    hire_date DATE
);

-- 4. Customers Table
CREATE TABLE IF NOT EXISTS customers (
    cust_id SMALLINT AUTO_INCREMENT PRIMARY KEY,
    cust_name VARCHAR(100) NOT NULL,
    address TEXT
);

-- 5. Products Table
CREATE TABLE IF NOT EXISTS products (
    prod_id TINYINT AUTO_INCREMENT PRIMARY KEY,
    prod_name VARCHAR(100) NOT NULL,
    sup_id TINYINT,
    cat_id TINYINT,
    price DECIMAL(10,2) NOT NULL,
    FOREIGN KEY (sup_id) REFERENCES supplier(sup_id)
        ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (cat_id) REFERENCES categories(cat_id)
        ON UPDATE CASCADE ON DELETE CASCADE
);

-- 6. Orders Table
CREATE TABLE IF NOT EXISTS orders (
    ord_id SMALLINT AUTO_INCREMENT PRIMARY KEY,
    cust_id SMALLINT,
    emp_id TINYINT,
    order_date DATE,
    FOREIGN KEY (cust_id) REFERENCES customers(cust_id)
        ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (emp_id) REFERENCES employees(emp_id)
        ON UPDATE CASCADE ON DELETE CASCADE
);

-- 7. Order_Details Table
CREATE TABLE IF NOT EXISTS order_details (
    ord_detID SMALLINT AUTO_INCREMENT PRIMARY KEY,
    ord_id SMALLINT,
    prod_id TINYINT,
    quantity TINYINT NOT NULL,
    each_price DECIMAL(10,2) NOT NULL,
    total_price DECIMAL(10,2) NOT NULL,
    FOREIGN KEY (ord_id) REFERENCES orders(ord_id)
        ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (prod_id) REFERENCES products(prod_id)
        ON UPDATE CASCADE ON DELETE CASCADE
);

-- Analysis Questions
-- 1️. Customer Insights

-- How many unique customers have placed orders?
SELECT COUNT(DISTINCT cust_id) AS unique_customers
FROM orders;

-- Which customers have placed the highest number of orders?
SELECT c.cust_id, c.cust_name, COUNT(o.ord_id) AS total_orders
FROM customers c
JOIN orders o ON c.cust_id = o.cust_id
GROUP BY c.cust_id, c.cust_name
ORDER BY total_orders DESC;

-- What is the total and average purchase value per customer?
SELECT c.cust_id, c.cust_name,
       SUM(od.total_price) AS total_purchase,
       AVG(od.total_price) AS avg_purchase
FROM customers c
JOIN orders o ON c.cust_id = o.cust_id
JOIN order_details od ON o.ord_id = od.ord_id
GROUP BY c.cust_id, c.cust_name
ORDER BY total_purchase DESC;

-- Who are the top 5 customers by total purchase amount?
SELECT c.cust_id, c.cust_name,
       SUM(od.total_price) AS total_purchase
FROM customers c
JOIN orders o ON c.cust_id = o.cust_id
JOIN order_details od ON o.ord_id = od.ord_id
GROUP BY c.cust_id, c.cust_name
ORDER BY total_purchase DESC
LIMIT 5;

-- 2. Product Performance
-- How many products exist and What is the average price of products by category
SELECT c.cat_id, c.cat_name, 
COUNT(p.prod_id) AS total_products, AVG(p.price) AS avg_price
FROM categories c
LEFT JOIN products p ON c.cat_id = p.cat_id
GROUP BY c.cat_id, c.cat_name
ORDER BY total_products DESC;

-- How many products exist in each category?
SELECT c.cat_id, c.cat_name, COUNT(p.prod_id) AS total_products
FROM categories c
LEFT JOIN products p ON c.cat_id = p.cat_id
GROUP BY c.cat_id, c.cat_name
ORDER BY total_products DESC;

-- What is the average price of products by category?
SELECT c.cat_id, c.cat_name, AVG(p.price) AS avg_price
FROM categories c
JOIN products p ON c.cat_id = p.cat_id
GROUP BY c.cat_id, c.cat_name
ORDER BY avg_price DESC;

-- Which products have the highest total sales volume (by quantity)?
SELECT p.prod_id, p.prod_name, SUM(od.quantity) AS total_quantity_sold
FROM products p
JOIN order_details od ON p.prod_id = od.prod_id
GROUP BY p.prod_id, p.prod_name
ORDER BY total_quantity_sold DESC;

-- What is the total revenue generated by each product?
SELECT p.prod_id, p.prod_name, SUM(od.total_price) AS total_revenue
FROM products p
JOIN order_details od ON p.prod_id = od.prod_id
GROUP BY p.prod_id, p.prod_name
ORDER BY total_revenue DESC;

-- How do product sales vary by category and supplier?
SELECT c.cat_name, s.sup_name,
       SUM(od.total_price) AS total_revenue,
       SUM(od.quantity) AS total_quantity
FROM order_details od
JOIN products p ON od.prod_id = p.prod_id
JOIN categories c ON p.cat_id = c.cat_id
JOIN supplier s ON p.sup_id = s.sup_id
GROUP BY c.cat_name, s.sup_name
ORDER BY total_revenue DESC;

-- 3. Sales and Order Trends

-- How many orders have been placed in total?
SELECT COUNT(ord_id) AS total_orders
FROM orders;

-- What is the average value per order?
SELECT AVG(order_total) AS avg_order_value
FROM (
    SELECT ord_id, SUM(total_price) AS order_total
    FROM order_details
    GROUP BY ord_id
) AS order_summary;

SELECT ord_id, SUM(total_price) AS avg_order_value
FROM order_details
GROUP BY ord_id;


-- On which dates were the most orders placed?
SELECT order_date, COUNT(ord_id) AS total_orders
FROM orders
GROUP BY order_date
ORDER BY total_orders DESC
LIMIT 10;

-- What are the monthly trends in order volume and revenue?
SELECT DATE_FORMAT(order_date, '%M %Y') AS month,
       COUNT(DISTINCT o.ord_id) AS total_orders,
       SUM(od.total_price) AS total_revenue
FROM orders o
JOIN order_details od ON o.ord_id = od.ord_id
GROUP BY DATE_FORMAT(order_date, '%M %Y')
ORDER BY MIN(order_date);

-- How do order patterns vary across weekdays and weekends?
SELECT 
    CASE 
        WHEN WEEKDAY(order_date) < 5 THEN 'Weekday'   -- Monday=0, ..., Friday=4
        ELSE 'Weekend'                               -- Saturday=5, Sunday=6
    END AS day_type,
    COUNT(DISTINCT o.ord_id) AS total_orders,
    SUM(od.total_price) AS total_revenue
FROM orders o
JOIN order_details od ON o.ord_id = od.ord_id
GROUP BY day_type
ORDER BY FIELD(day_type, 'Weekday', 'Weekend');

-- 4️. Supplier Contribution

-- 	How many suppliers are there in the database?
SELECT COUNT(*) AS total_suppliers
FROM supplier;

-- 	Which supplier provides the most products?
SELECT s.sup_id, s.sup_name, COUNT(p.prod_id) AS product_count
FROM supplier s
JOIN products p ON s.sup_id = p.sup_id
GROUP BY s.sup_id, s.sup_name
ORDER BY product_count DESC;

-- 	What is the average price of products from each supplier?
SELECT s.sup_id, s.sup_name, AVG(p.price) AS avg_product_price
FROM supplier s
JOIN products p ON s.sup_id = p.sup_id
GROUP BY s.sup_id, s.sup_name
ORDER BY avg_product_price DESC;

-- 	Which suppliers contribute the most to total product sales (by revenue)?
SELECT s.sup_id, s.sup_name, SUM(od.total_price) AS total_revenue
FROM supplier s
JOIN products p ON s.sup_id = p.sup_id
JOIN order_details od ON p.prod_id = od.prod_id
GROUP BY s.sup_id, s.sup_name
ORDER BY total_revenue DESC;


-- 5️. Employee Performance

-- How many employees have processed orders?
SELECT COUNT(DISTINCT emp_id) AS active_employees
FROM orders;

-- Which employees have handled the most orders?
SELECT e.emp_id, e.emp_name, COUNT(o.ord_id) AS total_orders
FROM employees e
JOIN orders o ON e.emp_id = o.emp_id
GROUP BY e.emp_id, e.emp_name
ORDER BY total_orders DESC;

-- What is the total sales value processed by each employee?
SELECT e.emp_id, e.emp_name, SUM(od.total_price) AS total_sales
FROM employees e
JOIN orders o ON e.emp_id = o.emp_id
JOIN order_details od ON o.ord_id = od.ord_id
GROUP BY e.emp_id, e.emp_name
ORDER BY total_sales DESC;

-- What is the average order value handled per employee?
SELECT e.emp_id, e.emp_name,
       AVG(order_total) AS avg_order_value
FROM employees e
JOIN orders o ON e.emp_id = o.emp_id
JOIN (
    SELECT ord_id, SUM(total_price) AS order_total
    FROM order_details
    GROUP BY ord_id
) AS od_summary ON o.ord_id = od_summary.ord_id
GROUP BY e.emp_id, e.emp_name
ORDER BY avg_order_value DESC;

-- 6️. Order Details Deep Dive

-- What is the relationship between quantity ordered and total price?
SELECT quantity, AVG(total_price) AS avg_total_price
FROM order_details
GROUP BY quantity
ORDER BY quantity;

-- What is the average quantity ordered per product?
SELECT p.prod_id, p.prod_name, AVG(od.quantity) AS avg_quantity
FROM products p
JOIN order_details od ON p.prod_id = od.prod_id
GROUP BY p.prod_id, p.prod_name
ORDER BY avg_quantity DESC;

-- How does the unit price vary across products and orders?
SELECT p.prod_id, p.prod_name, AVG(od.each_price) AS avg_unit_price
FROM products p
JOIN order_details od ON p.prod_id = od.prod_id
GROUP BY p.prod_id, p.prod_name
ORDER BY avg_unit_price DESC
LIMIT 15;

SELECT 
    od.ord_id,
    p.prod_id,
    p.prod_name,
    AVG(od.each_price) AS avg_unit_price
FROM order_details od
JOIN products p ON od.prod_id = p.prod_id
GROUP BY od.ord_id, p.prod_id, p.prod_name
ORDER BY od.ord_id, avg_unit_price DESC;






